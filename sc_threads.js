// Generated by LiveScript 1.5.0
(function(){
  var fs, bootSC, replace$ = ''.replace;
  const Threads = require('threads')

  function spawnThread () {
    return Threads.spawn(new Threads.Worker("./worker"))
  }

  global.SC == null && (global.SC = {
    console: console
  });

  this.include = function(){
    var DB, EXPIRE, emailer, dataDir;
    DB = this.include('db');
    EXPIRE = this.EXPIRE;
    emailer = this.include('emailer');
    dataDir = process.env.OPENSHIFT_DATA_DIR;

    SC._csvToSave = function(csv, cb){
      spawnThread().then(t => {
        t.eval("SocialCalc.ConvertOtherFormatToSave(" + JSON.stringify(csv) + ", 'csv')")
          .then(result => cb(result))
          .then(() => Threads.Thread.terminate(t))
      })
    };

    SC._get = function(room, io, cb){
      var ref$;
      if ((ref$ = SC[room]) != null && ref$._snapshot) {
        return cb({
          snapshot: SC[room]._snapshot
        });
      }
      return DB.multi().get("snapshot-" + room).lrange("log-" + room, 0, -1).exec(function(arg$, arg1$){
        var snapshot, log;
        snapshot = arg1$[0], log = arg1$[1];
        if (EXPIRE) {
          DB.expire("snapshot-" + room, EXPIRE);
        }

        if ((snapshot || log.length) && io) {
          SC[room] = SC._init(snapshot, log, DB, room, io);
        }

        return cb({
          log: log,
          snapshot: snapshot
        });
      });
    };

    SC._put = function(room, snapshot, cb){
      if (!snapshot) {
        return typeof cb == 'function' ? cb() : void 8;
      }

      return DB.multi().set("snapshot-" + room, snapshot).del(["log-" + room, "chat-" + room, "ecell-" + room, "audit-" + room]).exec(function(){
        if (EXPIRE) {
          DB.expire("snapshot-" + room, EXPIRE);
        }
        return typeof cb == 'function' ? cb() : void 8;
      });
    };

    SC._del = function(room, cb){
      return DB.multi().del(["snapshot-" + room, "log-" + room, "chat-" + room, "ecell-" + room, "audit-" + room]).exec(function(){
        return typeof cb == 'function' ? cb() : void 8;
      });
    };

    SC._rooms = function(cb){
      return DB.multi().keys('snapshot-*').exec(function(arg$, arg1$){
        var rooms;
        rooms = arg1$[0];

        return cb((function(){
          var i$, x$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = rooms).length; i$ < len$; ++i$) {
            x$ = ref$[i$];
            results$.push(x$.replace(/^snapshot-/, ""));
          }
          return results$;
        }()));
      });
    };

    SC._roomtimes = function(cb){
      return DB.hgetall("timestamps", function(_, res){
        return cb(res);
      });
    };

    SC._exists = function(room, cb){
      return DB.multi().exists("snapshot-" + room).exec(function(arg$, arg1$){
        var x;
        x = arg1$[0];
        return cb(x);
      });
    };

    SC._init = function(snapshot, log, DB, room, io){
      log == null && (log = []);
      if (SC[room] != null) {
        SC[room]._doClearCache();
        return SC[room];
      }

      var w = {}

      w.thread = spawnThread()

      w._snapshot = snapshot;
      w.onSnapshot = function(newSnapshot){
        io.sockets['in']("recalc." + room).emit('data', {
          type: 'recalc',
          snapshot: newSnapshot,
          force: true,
          room: room
        });

        w._snapshot = newSnapshot;
        return DB.multi().set("snapshot-" + room, newSnapshot).hset('timestamps', "timestamp-" + room, Date.now()).del("log-" + room).exec(function(){
          if (EXPIRE) {
            return DB.expire("snapshot-" + room, EXPIRE);
          }
        });
      };
      w.onerror = function(it){
        return console.log(it);
      };
      w.onmessage = function(ref$){
        var type, snapshot, html, csv, ref, parts, save, emaildata, timetriggerdata, this$ = this;
        type = ref$.type, snapshot = ref$.snapshot, html = ref$.html, csv = ref$.csv, ref = ref$.ref, parts = ref$.parts, save = ref$.save, emaildata = ref$.emaildata, timetriggerdata = ref$.timetriggerdata;

        switch (type) {
          case 'snapshot':
            return w.onSnapshot(snapshot);
          case 'save':
            return w.onSave(save);
          case 'html':
            return w.onHtml(html);
          case 'csv':
            return w.onCsv(csv);
          case 'setcrontrigger':
            console.log("set cron " + room);
            return DB.get("cron-nextTriggerTime", function(arg$, nextTriggerTime){
              var scheduledNextTriggerTime, timeNowMins, triggerTimeList, res$, i$, ref$, len$, nextTime;
              scheduledNextTriggerTime = nextTriggerTime;
              timeNowMins = Math.floor(new Date().getTime() / (1000 * 60));
              console.log("timeNowMins " + timeNowMins + " .dataDir " + dataDir);
              nextTriggerTime == null && (nextTriggerTime = 2147483647);
              res$ = [];
              for (i$ = 0, len$ = (ref$ = timetriggerdata.times.split(",")).length; i$ < len$; ++i$) {
                nextTime = ref$[i$];
                if (nextTime >= timeNowMins) {
                  if (nextTriggerTime > nextTime) {
                    nextTriggerTime = nextTime;
                  }
                  res$.push(nextTime);
                }
              }
              triggerTimeList = res$;
              if (scheduledNextTriggerTime !== nextTriggerTime) {
                fs.writeFileSync(dataDir + "/nextTriggerTime.txt", nextTriggerTime, 'utf8');
              }
              if (triggerTimeList.length === 0) {
                return DB.hdel("cron-list", room + "!" + timetriggerdata.cell, function(){});
              } else {
                return DB.multi().hset("cron-list", room + "!" + timetriggerdata.cell, triggerTimeList.toString()).set("cron-nextTriggerTime", nextTriggerTime).exec(function(){
                  return DB.hgetall("cron-list", function(arg$, allTimeTriggers){
                    return console.log("allTimeTriggers", (import$({}, allTimeTriggers)), " nextTriggerTime " + nextTriggerTime);
                  });
                });
              }
            });
          case 'sendemailout':
            console.log("onmessage " + emaildata.to);
            return emailer != null ? emailer.sendemail(emaildata.to, emaildata.subject, emaildata.body, function(message){
              return io.sockets['in']("log-" + room).emit('data', {
                type: 'confirmemailsent',
                message: message
              });
            }) : void 8;
          case 'load-sheet':
            return SC._get(ref, io, function(){
              if (SC[ref]) {
                return SC[ref].exportSave(function(save){
                  return w.thread.then(t => t.execute({
                    type: 'recalc',
                    ref: ref,
                    snapshot: save
                  }));
                });
              } else {
                return w.thread.then(t => t.execute({
                  type: 'recalc',
                  ref: ref,
                  snapshot: ''
                }));
              }
            });
        }
      };

      w._doClearCache = function(){
        return w.thread.then(t => t.execute({
          type: 'clearCache'
        }));
      };

      w.ExecuteCommand = function(command){
        return w.thread.then(t => t.execute({
          type: 'cmd',
          command: command
        }));
      };

      w.exportHTML = function (cb) {
        DB.lrange('log-' + room, 0, -1, function (arg$, log) {
          spawnThread()
            .then(t => {
              return t.exportHTML({
                snapshot: w._snapshot,
                log: log
              }).then(data => ({ data, t }))
            })
            .then(({ data, t }) => {
              cb(data)
              Threads.Thread.terminate(t)
            })
        })
      }

      w.exportCSV = function(cb){
        return DB.lrange("log-" + room, 0, -1, function(arg$, log){
          spawnThread()
            .then(t => {
              return t.exportCSV({
                snapshot: w._snapshot,
                log: log
              }).then(data =>({ data, t }))
            })
            .then(({ data, t }) => {
              cb(data)
              Threads.Thread.terminate(t)
            })
        })
      };

      w._eval = function(code, cb){
        return DB.lrange('log-' + room, 0, -1, function (arg$, log) {
          spawnThread()
            .then(t => {
              return t.execute({
                snapshot: w._snapshot,
                log: log,
                code: code
              }).then(data =>({ data, t }))
            })
            .then(({ data, t }) => {
              cb(data)
              Threads.Thread.terminate(t)
            })
        })
      };

      w.exportSave = function(cb){
        return w._eval("window.ss.CreateSheetSave()", cb);
      };

      w.exportCell = function(coord, cb){
        return w._eval("JSON.stringify(window.ss.sheet.cells[" + (replace$.call(JSON.stringify(coord), /\s/g, '')) + "])", function(cell){
          if (cell === 'undefined') {
            return cb('null');
          } else {
            return cb(cell);
          }
        });
      };

      w.exportCells = function(cb){
        return w._eval("JSON.stringify(window.ss.sheet.cells)", cb);
      };

      w.exportAttribs = function(cb){
        return w._eval("window.ss.sheet.attribs", cb);
      };

      w.triggerActionCell = function(coord, cb){
        return w._eval("window.ss.SocialCalc.TriggerIoAction.Email('" + coord + "')", function(emailcmd){
          var i$, len$, nextEmail, res$, j$, len1$, addSpaces, emailto, subject, body;
          for (i$ = 0, len$ = emailcmd.length; i$ < len$; ++i$) {
            nextEmail = emailcmd[i$];
            res$ = [];
            for (j$ = 0, len1$ = nextEmail.length; j$ < len1$; ++j$) {
              addSpaces = nextEmail[j$];
              res$.push(addSpaces.replace(/%20/g, ' '));
            }
            nextEmail = res$;
            emailto = nextEmail[0], subject = nextEmail[1], body = nextEmail[2];
            if (emailer != null) {
              emailer.sendemail(emailto, subject, body, fn$);
            }
          }
          return cb(emailcmd);
          function fn$(message){}
        });
      };

      w.terminate = function () {
        w.thread.then(t => Threads.Thread.terminate(t))
      }

      w.thread
        .then(t => t.execute({
          type: 'init',
          room: room,
          log: log,
          snapshot: snapshot,
          bootSC: bootSC
        }))
        .then(subject => {
          subject.subscribe(data => w.onmessage(data))
        })

      return w
    };

    return SC;
  };

  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
